// Code generated by MockGen. DO NOT EDIT.
// Source: mock_test.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFace is a mock of IFace interface.
type MockIFace struct {
	ctrl     *gomock.Controller
	recorder *MockIFaceMockRecorder
}

// MockIFaceMockRecorder is the mock recorder for MockIFace.
type MockIFaceMockRecorder struct {
	mock *MockIFace
}

// NewMockIFace creates a new mock instance.
func NewMockIFace(ctrl *gomock.Controller) *MockIFace {
	mock := &MockIFace{ctrl: ctrl}
	mock.recorder = &MockIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFace) EXPECT() *MockIFaceMockRecorder {
	return m.recorder
}

// CallA mocks base method.
func (m *MockIFace) CallA(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CallA", arg0)
}

// CallA indicates an expected call of CallA.
func (mr *MockIFaceMockRecorder) CallA(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallA", reflect.TypeOf((*MockIFace)(nil).CallA), arg0)
}

// CallB mocks base method.
func (m *MockIFace) CallB(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallB", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// CallB indicates an expected call of CallB.
func (mr *MockIFaceMockRecorder) CallB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallB", reflect.TypeOf((*MockIFace)(nil).CallB), arg0)
}
